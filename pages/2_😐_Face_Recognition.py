import streamlit as st
import numpy as np
import cv2 as cv
st.set_page_config(page_title="Face Reconition", page_icon="üòê")
st.subheader('Face Reconition')
# T·∫°o M·ªôt h√¨nh ·∫£nh placeholder FRAME_WINDOW ƒë∆∞·ª£c t·∫°o b·∫±ng st.image([]).
FRAME_WINDOW = st.image([])
# Thi·∫øt l·∫≠p c√°c bi·∫øn deviceId v√† cap ƒë·ªÉ truy c·∫≠p camera. Trong tr∆∞·ªùng h·ª£p n√†y, deviceId ƒë∆∞·ª£c ƒë·∫∑t l√† 0, t∆∞∆°ng ·ª©ng v·ªõi camera m·∫∑c ƒë·ªãnh.
deviceId = 0
cap = cv.VideoCapture(deviceId)

# Ki·ªÉm tra n·∫øu 'stop' kh√¥ng c√≥ trong st.session_state, sau ƒë√≥ t·∫°o bi·∫øn stop v√† st.session_state.stop v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh False.
if 'stop' not in st.session_state:
    st.session_state.stop = False
    stop = False


press = st.button('Stop')
# Khi n√∫t 'Stop' ƒë∆∞·ª£c nh·∫•n
if press:
    #  N·∫øu st.session_state.stop l√† False, th√¨ camera s·∫Ω ƒë∆∞·ª£c d·ª´ng v√† st.session_state.stop ƒë∆∞·ª£c thi·∫øt l·∫≠p l√† True.
    if st.session_state.stop == False:
        st.session_state.stop = True
        cap.release()
    # Ng∆∞·ª£c l·∫°i
    else:
        st.session_state.stop = False

print('Trang thai nhan Stop', st.session_state.stop)

if 'frame_stop' not in st.session_state:
    frame_stop = cv.imread('./pages/stop.jpg')
    st.session_state.frame_stop = frame_stop
    print('ƒê√£ load stop.jpg')

if st.session_state.stop == True:
    FRAME_WINDOW.image(st.session_state.frame_stop, channels='BGR')

# ƒê·ªãnh nghƒ©a h√†m visualize ƒë·ªÉ hi·ªÉn th·ªã c√°c khu√¥n m·∫∑t ƒë∆∞·ª£c nh·∫≠n di·ªán l√™n h√¨nh ·∫£nh ƒë·∫ßu v√†o.
def visualize(input, faces, fps, thickness=2):
    if faces[1] is not None:
        for idx, face in enumerate(faces[1]):
            # print('Face {}, top-left coordinates: ({:.0f}, {:.0f}), box width: {:.0f}, box height {:.0f}, score: {:.2f}'.format(idx, face[0], face[1], face[2], face[3], face[-1]))

            coords = face[:-1].astype(np.int32)
            cv.rectangle(input, (coords[0], coords[1]), (coords[0]+coords[2], coords[1]+coords[3]), (0, 255, 0), thickness)
            cv.circle(input, (coords[4], coords[5]), 2, (255, 0, 0), thickness)
            cv.circle(input, (coords[6], coords[7]), 2, (0, 0, 255), thickness)
            cv.circle(input, (coords[8], coords[9]), 2, (0, 255, 0), thickness)
            cv.circle(input, (coords[10], coords[11]), 2, (255, 0, 255), thickness)
            cv.circle(input, (coords[12], coords[13]), 2, (0, 255, 255), thickness)
    cv.putText(input, 'FPS: {:.2f}'.format(fps), (1, 16), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

# T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng detector c·ªßa l·ªõp FaceDetectorYN t·ª´ OpenCV, s·ª≠ d·ª•ng m√¥ h√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t ƒë√£ ƒë∆∞·ª£c ƒë√†o t·∫°o tr∆∞·ªõc ƒë√≥.
detector = cv.FaceDetectorYN.create(
    './pages/face_detection_yunet_2022mar.onnx',
    "",
    (320, 320),
    0.9,
    0.3,
    5000
)
# Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc khung h√¨nh ƒë·∫ßu v√†o cho b·ªô nh·∫≠n di·ªán khu√¥n m·∫∑t.
tm = cv.TickMeter()
frameWidth = int(cap.get(cv.CAP_PROP_FRAME_WIDTH))
frameHeight = int(cap.get(cv.CAP_PROP_FRAME_HEIGHT))
detector.setInputSize([frameWidth, frameHeight])

# Trong v√≤ng l·∫∑p v√¥ h·∫°n, ƒë·ªçc t·ª´ng khung h√¨nh t·ª´ camera s·ª≠ d·ª•ng cap.read().
while True:
    hasFrame, frame = cap.read()
    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ khung h√¨nh, t·ª©c l√† kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c t·ª´ camera, th√¨ v√≤ng l·∫∑p d·ª´ng l·∫°i.
    if not hasFrame:
        print('No frames grabbed!')
        break

    frame = cv.resize(frame, (frameWidth, frameHeight))

    # Inference
    tm.start()
    # Th·ª±c hi·ªán nh·∫≠n di·ªán khu√¥n m·∫∑t b·∫±ng c√°ch g·ªçi ph∆∞∆°ng th·ª©c detect c·ªßa detector.
    faces = detector.detect(frame) # faces is a tuple
    tm.stop()

    # Draw results on the input image
    # G·ªçi h√†m visualize ƒë·ªÉ v·∫Ω c√°c khu√¥n m·∫∑t ƒë∆∞·ª£c nh·∫≠n di·ªán l√™n khung h√¨nh ƒë·∫ßu v√†o.
    visualize(frame, faces, tm.getFPS())

    # Visualize results
    # Hi·ªÉn th·ªã khung h√¨nh ƒë·∫ßu v√†o v·ªõi c√°c khu√¥n m·∫∑t ƒë√£ ƒë∆∞·ª£c nh·∫≠n di·ªán b·∫±ng FRAME_WINDOW.image.
    FRAME_WINDOW.image(frame, channels='BGR')
cv.destroyAllWindows()
